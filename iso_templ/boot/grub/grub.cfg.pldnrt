
echo "starting grub.cfg"

sleep -i 2

echo "setting up console"
terminal_input console
terminal_output console

sleep -i 2

if [ "$grub_platform" = "efi" ] ; then
    echo "Skipping serial port set up, it may lock-up EFI boot"
elif keystatus --ctrl ; then
    echo "Ctrl pressed, skipping serial port set up"
else
    echo "setting up serial port (boot with Ctrl pressed to skip this)"
    serial --unit=0 --speed=115200
    terminal_input --append serial
    terminal_output --append serial
fi

sleep -i 2

timeout=15
default=0

echo "building menu"

#
# [ -e ... ] test won't work for network files
# we need to check this in a different way
#
function have_file {

    rel_path="$1"

    if [ "$netboot" = "yes" ] ; then
        if [ -n "$pldnr_net_files" ] ; then
            regexp ":${rel_path}:" "$pldnr_net_files"
        else
            return 0
        fi
    else
        [ -e "${pldnr_prefix}/$rel_path" ]
    fi
}

#
# Set up the frame-buffer for Linus
#
function setup_efi_fb {
    echo "setting up EFI graphical console"
    sleep -i 2
    set gfxmode=auto
    set gfxpayload=keep
    insmod efi_gop
    insmod efi_uga
    insmod font

    if loadfont ${prefix}/font.pf2 ; then
        insmod gfxterm
        terminal_output gfxterm
    fi
}

#
# To have simple code in the menu entries
# which can be easily edited by the user
#
function load_pldnr {

    boot_prefix=$1
    shift

    if [ -n "@grub_progress_mod@" ] ; then
        insmod @grub_progress_mod@
    fi

    echo "loading ${pldnr_prefix}/${boot_prefix}/vmlinuz..."
    if [ "$grub_platform" = "efi" ] ; then
        @grub_linuxefi@ "${pldnr_prefix}/${boot_prefix}/vmlinuz" "$@"
    else
        linux "${pldnr_prefix}/${boot_prefix}/vmlinuz" "$@"
    fi

    initrds="${pldnr_prefix}/${boot_prefix}/_init.cpi"

    if [ "$early_net" = "yes" ] ; then
        initrds="$initrds ${pldnr_prefix}/${boot_prefix}/_net.cpi"
    fi

    for module in $preload_modules ; do
        if have_file "${boot_prefix}/${module}.cpi" ; then
            initrds="$initrds ${pldnr_prefix}/${boot_prefix}/${module}.cpi"
        fi
    done

    echo "loading $initrds..."
    if [ "$grub_platform" = "efi" ] ; then
        @grub_initrdefi@ $initrds
    else
        initrd $initrds
    fi

    echo "booting..."
}

function pldnr_menuentry {

    title="$1"
    net_ok="$2"
    bits="$3"
    modules="$4"
    options="$5"

    if [ "$grub_platform" = "efi" ] ; then
        setup_efi_fb="setup_efi_fb
"
    else
        setup_efi_fb=""
    fi

    if [ "$netboot" = "yes" -a "$net_ok" = "yes" ] ; then
        options="$options pldnr.nomedia"
    fi

    if [ -n "$net_pxe_mac" ] ; then
        # BIOS
        options="$options pldnr.netdev=$net_pxe_mac"
    elif [ -n "$net_default_mac" ] ; then
        # UEFI
        options="$options pldnr.netdev=$net_default_mac"
    fi

    if [ -n "$pldnr_iscsi" -a "$net_ok" = "iscsi" ] ; then
        options="$options pldnr.iscsi=$pldnr_iscsi"
    fi

    if [ -n "$pldnr_options" ] ; then
        options="$options $pldnr_options"
    fi

    if have_file pld-nr-$bits/_net.cpi ; then
        if [ "$netboot" = "yes" ] ; then
            _early_net="early_net=yes
"
        else
            _early_net="early_net=no
"
        fi
    else
        _early_net=""
    fi

    if [ "$net_ok" = "no" -a "$netboot" = "yes" ] ; then
        return 1
    elif [ "$net_ok" = "iscsi" -a "$netboot" = "yes" -a -z "$pldnr_iscsi" ] ; then
        return 1
    elif have_file pld-nr-$bits/vmlinuz ; then

        menuentry "$title" --source "${setup_efi_fb}preload_modules=\"$modules\"
${_early_net}load_pldnr pld-nr-$bits $options
"
    else
        return 1
    fi
}

function other_menuentry {

    title="$1"
    net_ok="$2"
    loader="$3"
    file="$4"
    options="$5"

    if [ -n "@grub_progress_mod@" ] ; then
        pstart="insmod @grub_progress_mod@
"
    fi

    if [ "$net_ok" = "no" -a "$netboot" = "yes" ] ; then
        return 1
    elif have_file "$file" ; then
        menuentry "$title" --source "$pstart$loader ${pldnr_prefix}/$file $options"
    elif [ -e "$file" ] ; then
        menuentry "$title" --source "$pstart$loader $file $options"
    else
        return 1
    fi
}

for bits in 64 32 ; do
    pldnr_menuentry \
                "PLD New Rescue $bits (minimum RAM)" \
                iscsi $bits ""

    pldnr_menuentry \
                "PLD New Rescue $bits (all in RAM)" \
                yes $bits "base basic rescue"

    pldnr_menuentry \
                "PLD New Rescue $bits (serial console, minimum RAM)" \
                iscsi $bits "" \
                "console=tty0 console=ttyS0,115200n8 earlyprintk=serial,ttyS0,115200"

    pldnr_menuentry \
                "PLD New Rescue $bits (serial console, all in RAM)" \
                yes $bits "base basic rescue" \
                "console=tty0 console=ttyS0,115200n8 earlyprintk=serial,ttyS0,115200"
done

if [ "$grub_platform" = "efi" ] ; then
    other_menuentry \
            "EFI Shell" \
            no chainloader "($efi_part)/EFI/SHELL${efi_suffix}.EFI"
else
    other_menuentry \
            "Memtest86" \
            yes linux16 boot/memtest86

    other_menuentry \
            "Memtest86+" \
            yes linux16 boot/memtest86_p
fi

# vi: et sw=4 sts=4
